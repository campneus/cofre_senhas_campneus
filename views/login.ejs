<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/login.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body class="login-body">
    <div class="login-container">
        <div class="login-card">
            <div class="login-header">
                <div class="logo">
                    <i class="fas fa-shield-alt"></i>
                    <h1>Sistema de Senhas</h1>
                </div>
                <p class="subtitle">Acesso seguro e controlado</p>
            </div>

            <div class="login-form-container">
                <form id="loginForm" class="login-form">
                    <div class="form-group">
                        <label for="email">E-mail</label>
                        <div class="input-group">
                            <i class="fas fa-envelope"></i>
                            <input type="email" id="email" name="email" required placeholder="seu@email.com">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="password">Senha</label>
                        <div class="input-group">
                            <i class="fas fa-lock"></i>
                            <input type="password" id="password" name="password" required placeholder="Sua senha">
                            <button type="button" class="toggle-password" onclick="togglePassword()">
                                <i class="fas fa-eye" id="toggleIcon"></i>
                            </button>
                        </div>
                    </div>

                    <button type="submit" class="login-btn" id="loginBtn">
                        <span class="btn-text">Entrar</span>
                        <i class="fas fa-spinner fa-spin loading-icon" style="display: none;"></i>
                    </button>
                </form>

                <div class="divider">
                    <span>ou</span>
                </div>

                <button type="button" class="google-btn" id="googleBtn">
                    <i class="fab fa-google"></i>
                    <span>Entrar com Google</span>
                </button>
            </div>

            <div class="login-footer">
                <p>&copy; 2024 Sistema de Senhas. Todos os direitos reservados.</p>
            </div>
        </div>

        <div class="background-pattern"></div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
        import { getAuth, signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';

        // Configuração do Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyC9b7BXNm8HijR-k-GZUJeCJn5gT0rKBbk",
            authDomain: "campneus-dashboard.firebaseapp.com",
            projectId: "campneus-dashboard",
            storageBucket: "campneus-dashboard.firebasestorage.app",
            messagingSenderId: "172203992376",
            appId: "1:172203992376:web:91d4ddf048071f110d8dcd",
            measurementId: "G-E6MZYD2YXG"
        };

        // Inicializar Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const provider = new GoogleAuthProvider();

        // Elementos do DOM
        const loginForm = document.getElementById('loginForm');
        const googleBtn = document.getElementById('googleBtn');
        const loginBtn = document.getElementById('loginBtn');

        // Login com email e senha
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            setLoading(true);
            
            try {
                const userCredential = await signInWithEmailAndPassword(auth, email, password);
                const user = userCredential.user;
                const token = await user.getIdToken();
                
                // Verificar token no backend
                await verifyTokenAndRedirect(token);
                
            } catch (error) {
                console.error('Erro no login:', error);
                showError('Erro ao fazer login: ' + error.message);
                setLoading(false);
            }
        });

        // Login com Google
        googleBtn.addEventListener('click', async () => {
            try {
                const result = await signInWithPopup(auth, provider);
                const user = result.user;
                const token = await user.getIdToken();
                
                // Verificar token no backend
                await verifyTokenAndRedirect(token);
                
            } catch (error) {
                console.error('Erro no login com Google:', error);
                showError('Erro ao fazer login com Google: ' + error.message);
            }
        });

        // Verificar token no backend e redirecionar
        async function verifyTokenAndRedirect(token) {
            try {
                const response = await fetch('/api/auth/verify', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ token })
                });

                const data = await response.json();

                if (data.success) {
                    // Salvar token no localStorage
                    localStorage.setItem('authToken', token);
                    localStorage.setItem('user', JSON.stringify(data.user));
                    
                    // Redirecionar para dashboard
                    window.location.href = '/dashboard';
                } else {
                    throw new Error(data.error || 'Erro na verificação do token');
                }
                
            } catch (error) {
                console.error('Erro na verificação:', error);
                showError('Erro na verificação: ' + error.message);
                setLoading(false);
            }
        }

        // Função para mostrar loading
        function setLoading(loading) {
            const btnText = document.querySelector('.btn-text');
            const loadingIcon = document.querySelector('.loading-icon');
            
            if (loading) {
                btnText.style.display = 'none';
                loadingIcon.style.display = 'inline-block';
                loginBtn.disabled = true;
            } else {
                btnText.style.display = 'inline-block';
                loadingIcon.style.display = 'none';
                loginBtn.disabled = false;
            }
        }

        // Função para mostrar erro
        function showError(message) {
            // Remover erro anterior se existir
            const existingError = document.querySelector('.error-message');
            if (existingError) {
                existingError.remove();
            }

            // Criar elemento de erro
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.innerHTML = `
                <i class="fas fa-exclamation-triangle"></i>
                <span>${message}</span>
            `;

            // Inserir antes do formulário
            const formContainer = document.querySelector('.login-form-container');
            formContainer.insertBefore(errorDiv, formContainer.firstChild);

            // Remover após 5 segundos
            setTimeout(() => {
                errorDiv.remove();
            }, 5000);
        }

        // Verificar se já está logado
        const token = localStorage.getItem('authToken');
        if (token) {
            // Verificar se token ainda é válido
            verifyTokenAndRedirect(token).catch(() => {
                // Token inválido, limpar localStorage
                localStorage.removeItem('authToken');
                localStorage.removeItem('user');
            });
        }
    </script>

    <script src="/js/login.js"></script>
</body>
</html>

